{"ast":null,"code":"var _jsxFileName = \"/Users/aa.ron/Documents/GitHub/sorting-visualiser/src/SortingVisualiser/SortingVisualiser.jsx\";\nimport React from 'react';\nimport './SortingVisualiser.css';\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SortingVisualiser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  // this is used during generate new array button\n  resetArray() {\n    const array = [];\n    const noElements = 200; // no of elements in an array\n    const MAXVALUE = 700; // max value of random integer \n\n    for (let i = 0; i < noElements; i++) {\n      array.push(getRandomInt(MAXVALUE));\n    }\n    this.setState({\n      array\n    });\n  }\n  mergeSort() {\n    const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n    // sorted\n    this.testSort(sortedArray);\n  }\n  arraysAreEqual(arr1, arr2) {\n    if (arr1 == arr2) {\n      return true;\n    }\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    if (arr1 == null || arr2 == null) {\n      return false;\n    }\n  }\n  testSort(mySortedArray) {\n    const jsSortedArray = this.state.array.slice().sort();\n    console.log(arraysAreEqual(jsSortedArray, sortedArray));\n  }\n  quickSort() {}\n  heapSort() {}\n  bubbleSprt() {}\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.resetArray(),\n          children: \"Generate New Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.heapSort(),\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.bubbleSprt(),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value}px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// gets random integer for resetting array\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n;","map":{"version":3,"names":["React","sortingAlgorithms","jsxDEV","_jsxDEV","SortingVisualiser","Component","constructor","props","state","array","componentDidMount","resetArray","noElements","MAXVALUE","i","push","getRandomInt","setState","mergeSort","sortedArray","testSort","arraysAreEqual","arr1","arr2","length","mySortedArray","jsSortedArray","slice","sort","console","log","quickSort","heapSort","bubbleSprt","render","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","value","idx","style","height","max","Math","floor","random"],"sources":["/Users/aa.ron/Documents/GitHub/sorting-visualiser/src/SortingVisualiser/SortingVisualiser.jsx"],"sourcesContent":["import React from 'react';\nimport './SortingVisualiser.css';\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms.js'\n\nexport default class SortingVisualiser extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {array: [],};\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    // this is used during generate new array button\n    resetArray() {\n        const array = [];\n        const noElements = 200; // no of elements in an array\n        const MAXVALUE = 700; // max value of random integer \n        \n        for (let i = 0; i < noElements; i++) {\n            array.push(getRandomInt(MAXVALUE));\n        }\n\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n        // sorted\n        this.testSort(sortedArray)\n        \n    }\n\n    arraysAreEqual(arr1, arr2) {\n\n        if (arr1 == arr2) {\n            return true;\n        }\n        if (arr1.length != arr2.length) {\n            return false;\n        }\n        if (arr1 == null || arr2 == null) {\n            return false;\n        }\n    }\n\n    testSort(mySortedArray) {\n        const jsSortedArray = this.state.array.slice().sort();\n        console.log(arraysAreEqual(jsSortedArray, sortedArray));\n    }\n\n   \n\n    quickSort() {}\n\n    heapSort() {}\n\n    bubbleSprt() {}\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div>\n                <div className=\"menu-bar\">\n                    <button onClick={() => this.resetArray()}>Generate New Array</button>\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\n                    <button onClick={() => this.bubbleSprt()}>Bubble Sort</button>\n                </div>\n   \n                <div className=\"array-container\">\n                \n                {array.map((value, idx) => (\n                    <div\n                    className=\"array-bar\" \n                    key={idx}\n                    style={{height: `${value}px`}}\n                    ></div>\n                ))}\n                    \n                </div>\n            </div>\n            )\n        }\n}\n\n// gets random integer for resetting array\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}